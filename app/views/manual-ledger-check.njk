{% extends '_layout.njk' %}
{% from "govuk/components/back-link/macro.njk" import govukBackLink %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/radios/macro.njk" import govukRadios %}
{% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
{% from "macros/payment-request-header.njk" import paymentRequestHeader %}
{% from "macros/payment-request-invoice-lines.njk" import paymentRequestInvoiceLines %}
{% from "macros/ledger-check.njk" import ledgerCheck %}

{% block beforeContent %}
  {{ govukBackLink({
      text: "Back",
      href: "/manual-ledger",
      attributes: {
        id: "back"
      }
    }) 
  }}
{% endblock %}

{% block content %}
  <div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
      <h1 class="govuk-heading-l">Manual Ledger Check - {{model.manualLedgerData.invoiceNumber}}</h1>
    </div>
    <div class="govuk-grid-column-full">
      <h1 class="govuk-heading-m">Original</h1>
      {{paymentRequestHeader(model.manualLedgerData)}}
      {{paymentRequestInvoiceLines(model.manualLedgerData.invoiceLines)}}
      {% if showLedgerSplit %}

        <h1 class="govuk-heading-m">Ledger Split:</h1>
        <form method="GET" action="/manual-ledger-check/calculate?paymentrequestid={{ model.manualLedgerData.paymentRequestId }}" novalidate>
          <div id="ledger-wrapper" class="govuk-form-group">
            <p id="ledger-value-error" class="govuk-error-message">
              <span class="govuk-visually-hidden">Error:</span> The entered values must equal Â£{{ model.manualLedgerData.valueInPounds }}
            </p>
            <input type="hidden" name="paymentRequestId" value="{{ model.manualLedgerData.paymentRequestId }}"/>
            {{ledgerCheck('ap', model.manualLedgerData.apAutoValue, model.manualLedgerData.valueInPounds)}}
            {{ledgerCheck('ar', model.manualLedgerData.arAutoValue, model.manualLedgerData.valueInPounds)}}
          </div>
          <div class="govuk-grid-column-full">
            {{ govukButton({
                text: "Calculate",
                attributes: {
                  id: "calculate-ledger"
                }
              }) 
            }}
          </div>
        </form>
      {% else %}
        <h1 class="govuk-heading-m">Provisional</h1>
        {% for data in model.manualLedgerData.manualLedgerChecks %}
          {{paymentRequestHeader(data.ledgerPaymentRequest)}}
          {{paymentRequestInvoiceLines(data.ledgerPaymentRequest.invoiceLines)}}
        {% endfor %}
        {{ model.errorMessage.text }}
        {% if model.errorMessage %}
            {{ govukErrorSummary({
                titleText: "There is a problem",
                errorList: model.errorMessage
              }) 
            }}
        {% endif %}
        <form action="/manual-ledger-check" method="post" novalidate="">
          <div class="govuk-form-group">
            <input type="hidden" name="paymentRequestId" value="{{model.manualLedgerData.paymentRequestId}}"/>
            <input type="hidden" name="crumb" value="{{crumb}}"/>
            <input type="hidden" name="provisionalValue" value="{{provisionalValue}}"/>
            {{ govukRadios(model.ledgerAgreement) }}
            {{ govukButton({
                text: "Continue",
                attributes: {
                  id: "manual-ledger-continue"
                }
              }) 
            }}
        </form>
      {% endif %}
    </div>
  </div>
</div>
  
  {% if model.errorSummary %}
    {{ govukErrorSummary({
      titleText: "There is a problem",
      errorList: model.errorSummary
    }) 
  }}
  {% endif %}

</div>
<script>
  const valueInPounds = {{model.manualLedgerData.valueInPounds}};

  const apValueId = 'ap-value'
  const arValueId = 'ar-value'
  const apPercentageId = 'ap-percentage'
  const arPercentageId = 'ar-percentage'

  const ledgerWrapper = document.getElementById('ledger-wrapper')
  const ledgerError = document.getElementById('ledger-value-error')
  const calculateAction = document.getElementById('calculate-ledger')

  const apValue = document.getElementById(apValueId)
  const apPercentage = document.getElementById(apPercentageId)
  const arValue = document.getElementById(arValueId)
  const arPercentage = document.getElementById(arPercentageId)

  const calculatePercentage = (partialValue, totalValue) => {
    return (100 * partialValue) / totalValue
  }

  const calculatePercentValue = (percentValue, partialValue) => {
    return ((percentValue * partialValue) / 100).toFixed(2)
  }

  const raiseError = (component, action, classType) => {
    component.classList[action](classType)
  }

  const validateValues = () => {
    const valuesToCheck = [apValue, arValue, arPercentage, apPercentage]
    const inputErrorClass = 'govuk-input--error'
    const formErrorClass = 'govuk-form-group--error'

    const checkIfValueString = valuesToCheck.every(value => isNaN(value.value))

    if (checkIfValueString || apPercentageId.value > 100 || arPercentage.value > 100) {
      valuesToCheck.forEach(value => {
        raiseError(value, 'add', inputErrorClass)
      })
      raiseError(ledgerWrapper, 'add', formErrorClass)
      ledgerError.style.display = 'block'
      calculateAction.disabled = true
    } else {
      valuesToCheck.forEach(value => {
        raiseError(value, 'remove', inputErrorClass)
      })
      raiseError(ledgerWrapper, 'remove', formErrorClass)
      ledgerError.style.display = 'none'
      calculateAction.disabled = false
    }
  }

  const setDefaultPercentage = () => {
    apPercentage.value = calculatePercentage(apValue.value, valueInPounds)
    arPercentage.value = calculatePercentage(arValue.value, valueInPounds)
    validateValues()
  }

  setDefaultPercentage()

  const setValue = (changedValue, valueToChange) => {
    const value = document.getElementById(changedValue).value
    const calculate = valueInPounds - value
    document.getElementById(valueToChange).value = calculate
    validateValues()
    setDefaultPercentage()
  }

  const setPercentage = (percentageChangeValue, valueToChange, percentageToCalculate, valueToCalculate) => {
    const value = document.getElementById(percentageChangeValue).value
    const percentValue = calculatePercentValue(value, valueInPounds)
    document.getElementById(valueToChange).value = percentValue
    const calculate = 100 - value
    document.getElementById(percentageToCalculate).value = calculate
    document.getElementById(valueToCalculate).value = calculatePercentValue(calculate, valueInPounds)
    validateValues()
  }

  arValue.addEventListener('input', (event) => {
    setValue(arValueId, apValueId)
  })

  apValue.addEventListener('input', (event) => {
    setValue(apValueId, arValueId)
  })

  arPercentage.addEventListener('input', (event) => {
    setPercentage(arPercentageId, arValueId, apPercentageId, apValueId)
  })

  apPercentage.addEventListener('input', (event) => {
    setPercentage(apPercentageId, apValueId, arPercentageId, arValueId)
  })
</script>
{% endblock %}
