{% extends '_layout.njk' %}
{% from "govuk/components/back-link/macro.njk" import govukBackLink %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/radios/macro.njk" import govukRadios %}
{% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
{% from "macros/payment-request-header.njk" import paymentRequestHeader %}
{% from "macros/payment-request-invoice-lines.njk" import paymentRequestInvoiceLines %}
{% from "macros/ledger-check.njk" import ledgerCheck %}

{% block content %}
  {{ govukBackLink({
      text: "Back",
      href: "/manual-ledger",
      attributes: {
        id: "back"
      }
    }) 
  }}
  <div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
      <span class="govuk-caption-l">{{model.manualLedgerData.invoiceNumber}}</span>
      <h1 class="govuk-heading-l">Review ledger assignment</h1>
    </div>
    <div class="govuk-grid-column-full">
      <h2 class="govuk-heading-m">Original</h2>
      {{paymentRequestHeader(model.manualLedgerData)}}
      
      <details class="govuk-details" data-module="govuk-details">
        <summary class="govuk-details__summary">
          <span class="govuk-details__summary-text">
            Invoice Lines
          </span>
        </summary>
        <div class="govuk-details__text">
          {{paymentRequestInvoiceLines(model.manualLedgerData.invoiceLines)}}
        </div>
      </details>

      
      {% if showLedgerSplit %}
        <h2 class="govuk-heading-m">Change ledger allocation</h2>
        <form method="GET" action="/manual-ledger-check/calculate?paymentrequestid={{ model.manualLedgerData.paymentRequestId }}" novalidate>
          <div id="ledger-wrapper" class="govuk-form-group">
            <p id="ledger-value-error" class="govuk-error-message error-text">
              <span class="govuk-visually-hidden error-text">Error:</span> The entered values must equal {{ model.manualLedgerData.valueInPoundsText }}
            </p>
            <input type="hidden" name="paymentRequestId" value="{{ model.manualLedgerData.paymentRequestId }}"/>
            {{ledgerCheck('ap', model.manualLedgerData.apAutoValue)}}
            {{ledgerCheck('ar', model.manualLedgerData.arAutoValue)}}
          </div>
          <div class="govuk-grid-column-full">
            {{ govukButton({
                text: "Calculate",
                attributes: {
                  id: "calculate-ledger"
                }
              }) 
            }}
          </div>
        </form>
      {% else %}
        <h2 class="govuk-heading-m">Provisional</h2>
        {% for data in model.manualLedgerData.manualLedgerChecks %}
          {{paymentRequestHeader(data.ledgerPaymentRequest)}}

          <details class="govuk-details" data-module="govuk-details">
        <summary class="govuk-details__summary">
          <span class="govuk-details__summary-text">
            Invoice Lines
          </span>
        </summary>
        <div class="govuk-details__text">
          {{paymentRequestInvoiceLines(data.ledgerPaymentRequest.invoiceLines)}}
        </div>
      </details>


        {% endfor %}
        {{ model.errorMessage.text }}
        {% if model.errorMessage %}
            {{ govukErrorSummary({
                titleText: "There is a problem",
                errorList: model.errorMessage
              }) 
            }}
        {% endif %}
        <form action="/manual-ledger-check" method="post" novalidate="">
          <div class="govuk-form-group">
            <input type="hidden" name="paymentRequestId" value="{{model.manualLedgerData.paymentRequestId}}"/>
            <input type="hidden" name="crumb" value="{{crumb}}"/>
            <input type="hidden" name="provisionalValue" value="{{provisionalValue}}"/>
            {{ govukRadios(model.ledgerAgreement) }}
            {{ govukButton({
                text: "Continue",
                attributes: {
                  id: "manual-ledger-continue"
                }
              }) 
            }}
        </form>
      {% endif %}
    </div>
  </div>
</div>
  
  {% if model.errorSummary %}
    {{ govukErrorSummary({
      titleText: "There is a problem",
      errorList: model.errorSummary
    }) 
  }}
  {% endif %}

</div>
<script>
  const totalValueInPounds = {{model.manualLedgerData.valueInPounds}}
  const totalValueInPence = {{model.manualLedgerData.value}}

  const apValueId = 'ap-value'
  const arValueId = 'ar-value'


  const ledgerWrapper = document.getElementById('ledger-wrapper')
  const ledgerError = document.getElementById('ledger-value-error')
  const calculateAction = document.getElementById('calculate-ledger')

  const apValue = document.getElementById(apValueId)
  const arValue = document.getElementById(arValueId)

  const checkArInputSign = Math.sign(arValue.value)
  const checkApInputSign = Math.sign(apValue.value)

  if (ledgerWrapper) {
    const convertToPence = (valueInPounds) => {
      const currencyArray = valueInPounds.toString().split('.')
      const pounds = currencyArray[0]
      const pence = (currencyArray[1] || '00').substring(0, 2).padEnd(2, '0')
      return Number(pounds + pence)
    }


    const convertToPounds = (valueInPence) => {
      return valueInPence / 100
    }

    const raiseError = (component, action, classType) => {
      component.classList[action](classType)
    }

    const checkInputSigns = (currentInput, originalInput) => {
      if (Math.sign(currentInput) === (Math.sign(originalInput)) || Math.sign(currentInput) === 0) {
        console.log(`checkInputSigns is true`)
        return true
      }
    }

    

    const validateValues = () => {
      const valuesToCheck = [apValue, arValue]
      const inputErrorClass = 'govuk-input--error'
      const formErrorClass = 'govuk-form-group--error'
      const checkIfValueString = valuesToCheck.every(value => isNaN(value.value))
      const errorMessageText = document.querySelector('.error-text')


      if (checkIfValueString || !checkInputSigns(arValue.value, checkArInputSign)) {
        errorMessageText.innerHTML = checkIfValueString ? 'The entered values must equal {{ model.manualLedgerData.valueInPoundsText }}' : 'This is a ledger split error'
        valuesToCheck.forEach(value => {
          raiseError(value, 'add', inputErrorClass)
        })
        raiseError(ledgerWrapper, 'add', formErrorClass)
        ledgerError.style.display = 'block'
        calculateAction.disabled = true
      } else {
        valuesToCheck.forEach(value => {
          raiseError(value, 'remove', inputErrorClass)
        })
        raiseError(ledgerWrapper, 'remove', formErrorClass)
        ledgerError.style.display = 'none'
        calculateAction.disabled = false
      }
    }

    validateValues()

    const setValue = (changedValue, valueToChange) => {
      const value = document.getElementById(changedValue).value
      const valueInPence = convertToPence(value)
      const calculate = totalValueInPence - valueInPence
      const valueInPounds = convertToPounds(calculate)
      document.getElementById(valueToChange).value = valueInPounds
      validateValues()
    }

    arValue.addEventListener('input', (event) => {
      setValue(arValueId, apValueId)
    })

    apValue.addEventListener('input', (event) => {
      setValue(apValueId, arValueId)
    })
  }
</script>
{% endblock %}
